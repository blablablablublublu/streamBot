import os
import requests
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask –¥–ª—è Webhook
app = Flask(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram
BOT_TOKEN = os.getenv("BOT_TOKEN", "8041256909:AAGjruzEE61q_H4R5zAwpTf53Peit37lqEg")
CHANNEL_ID = "UCcBeq64BydUvdA-kZsITNlg"  # YouTube Channel ID
TIKTOK_USERNAME = "top_gamer_qq"
TELEGRAM_CHANNEL = "@testbotika12"  # ID —Ç–≤–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª—É

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Application
telegram_app = Application.builder().token(BOT_TOKEN).build()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Application
telegram_app.initialize()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ YouTube
async def check_youtube():
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        url = f"https://www.youtube.com/channel/{CHANNEL_ID}/live"
        response = requests.get(url, headers=headers, timeout=3)
        if response.status_code == 200 and '"isLive":true' in response.text:
            title_start = response.text.find("<title>") + 7
            title_end = response.text.find("</title>")
            title = response.text[title_start:title_end].replace(" - YouTube", "")
            return f"üî¥ YouTube: {title}\n{url}"
        return None
    except Exception as e:
        print(f"Error checking YouTube: {str(e)}")
        return None

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TikTok
async def check_tiktok():
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        url = f"https://www.tiktok.com/@{TIKTOK_USERNAME}/live"
        response = requests.get(url, headers=headers, timeout=3)
        if response.status_code == 200 and '"isLive":true' in response.text:
            return f"üé• TikTok: {url}"
        return None
    except Exception as e:
        print(f"Error checking TikTok: {str(e)}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "üé• –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—ñ–º—ñ–≤ –Ω–∞ YouTube —Ç–∞ TikTok! üöÄ\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É /check, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Å—Ç—Ä—ñ–º–∏."
    )
    await update.message.reply_text(welcome_message)

# –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—ñ–º—ñ–≤
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç—Ä—ñ–º–∏, –∑–∞—á–µ–∫–∞–π...")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—ñ–º—ñ–≤
    live_streams = []
    youtube_stream = await check_youtube()
    if youtube_stream:
        live_streams.append(youtube_stream)

    tiktok_stream = await check_tiktok()
    if tiktok_stream:
        live_streams.append(tiktok_stream)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if live_streams:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ Telegram-–∫–∞–Ω–∞–ª
        stream_message = "üéâ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ñ —Å—Ç—Ä—ñ–º–∏:\n" + "\n".join(live_streams)
        await telegram_app.bot.send_message(chat_id=TELEGRAM_CHANNEL, text=stream_message)
        await update.message.reply_text("–°—Ç—Ä—ñ–º–∏ –∑–Ω–∞–π–¥–µ–Ω–æ! –Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: @testbotika12")
    else:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä—ñ–º—ñ–≤.")

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("check", check))

# Webhook –µ–Ω–¥–ø–æ—ñ–Ω—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π)
@app.route('/webhook', methods=['POST'])
async def webhook():
    try:
        body = request.get_json()
        print(f"Received webhook request: {body}")
        if not body:
            return {"status": "No JSON data"}, 200

        update = Update.de_json(body, telegram_app.bot)
        if update:
            await telegram_app.process_update(update)
            print("Update processed successfully")
        else:
            print("Invalid update data")

        return {"status": "OK"}, 200
    except Exception as e:
        print(f"Error processing webhook: {str(e)}")
        return {"error": str(e)}, 200

# Health check –¥–ª—è UptimeRobot
@app.route('/health', methods=['GET'])
def health():
    return {"status": "OK"}, 200

# –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è UptimeRobot (–¥–ª—è –∫–æ—Ä–µ–Ω—è)
@app.route('/', methods=['GET', 'HEAD'])
def root():
    return {"status": "OK"}, 200

# –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
if __name__ == "__main__":
    print("Starting Flask server...")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
