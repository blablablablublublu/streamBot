import os
import re
import requests
import logging
import threading
import time
from datetime import datetime
import telebot

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ BotFather
BOT_TOKEN = os.getenv("BOT_TOKEN", "8041256909:AAGP38US7WMqPKP1FXCM59M_Abx0Q6nBtBk")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")  # –Ø–∫—â–æ —î API-–∫–ª—é—á, —ñ–Ω–∞–∫—à–µ –∑–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º
CHANNEL_ID = "UCcBeq64BydUvdA-kZsITNlg"           # YouTube Channel ID
TIKTOK_USERNAME = "top_gamer_qq"
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL", "@testbotika12")  # –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_LOGIN = "dmqman"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä—ñ–º—ñ–≤ (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É)
active_streams = {
    "YouTube": False,
    "TikTok": False,
    "Twitch": False
}

def in_grey_zone() -> bool:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ "—Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ" (–∑ 2:00 –¥–æ 12:00),
    –∫–æ–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤.
    """
    now = datetime.now()
    return 2 <= now.hour < 12

def check_youtube_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–µ–¥–µ YouTube –∫–∞–Ω–∞–ª —Å—Ç—Ä—ñ–º.
    –Ø–∫—â–æ –∑–∞–¥–∞–Ω–∏–π API-–∫–ª—é—á, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î YouTube Data API, —ñ–Ω–∞–∫—à–µ ‚Äì —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ HTML.
    """
    try:
        if YOUTUBE_API_KEY:
            url = ("https://www.googleapis.com/youtube/v3/search"
                   f"?part=snippet&channelId={CHANNEL_ID}&eventType=live&type=video&key={YOUTUBE_API_KEY}")
            resp = requests.get(url, timeout=5)
            data = resp.json()
            if data.get("items"):
                video_id = data["items"][0]["id"]["videoId"]
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                return True, video_url
        else:
            url = f"https://www.youtube.com/channel/{CHANNEL_ID}/live"
            resp = requests.get(url, timeout=5)
            if "isLiveBroadcast" in resp.text:
                return True, url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ YouTube: %s", e)
        return False, None

def check_tiktok_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–µ–¥–µ TikTok –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç—Ä—ñ–º, —à—É–∫–∞—é—á–∏ –ø–∞—Ç—Ç–µ—Ä–Ω "liveStatus" —É HTML-—Ä–æ–∑–º—ñ—Ç—Ü—ñ.
    """
    try:
        url = f"https://www.tiktok.com/@{TIKTOK_USERNAME}"
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers, timeout=5)
        match = re.search(r'"liveStatus"\s*:\s*(true|false)', resp.text, re.IGNORECASE)
        if match and match.group(1).lower() == "true":
            return True, url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TikTok: %s", e)
        return False, None

def check_twitch_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç—Ä—ñ–º—É –Ω–∞ Twitch —á–µ—Ä–µ–∑ API (–ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ client_id —ñ client_secret).
    """
    try:
        if TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET:
            token_url = "https://id.twitch.tv/oauth2/token"
            params = {
                "client_id": TWITCH_CLIENT_ID,
                "client_secret": TWITCH_CLIENT_SECRET,
                "grant_type": "client_credentials"
            }
            token_resp = requests.post(token_url, params=params, timeout=5)
            token_data = token_resp.json()
            access_token = token_data.get("access_token")
            if not access_token:
                return False, None
            headers = {
                "Client-ID": TWITCH_CLIENT_ID,
                "Authorization": f"Bearer {access_token}"
            }
            stream_resp = requests.get(
                "https://api.twitch.tv/helix/streams",
                headers=headers,
                params={"user_login": TWITCH_LOGIN},
                timeout=5
            )
            stream_data = stream_resp.json()
            if stream_data.get("data"):
                live_url = f"https://www.twitch.tv/{TWITCH_LOGIN}"
                return True, live_url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Twitch: %s", e)
        return False, None

def check_streams_and_notify():
    """
    –§–æ–Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç—Ä—ñ–º–∏ –Ω–∞ –≤—Å—ñ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.
    –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π —Å—Ç—Ä—ñ–º (—Ç–æ–±—Ç–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏—Å—å),
    –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram-–∫–∞–Ω–∞–ª —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø–æ–∑–Ω–∞—á–∫—É.
    –Ø–∫—â–æ —Å—Ç—Ä—ñ–º –∑–∞–≤–µ—Ä—à–∏–≤—Å—è ‚Äì –ø–æ–∑–Ω–∞—á–∫—É —Å–∫–∏–¥–∞—î.
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —É "—Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ" (–∑ 2:00 –¥–æ 12:00).
    """
    while True:
        if in_grey_zone():
            logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ (—Å—ñ—Ä–∞ –∑–æ–Ω–∞).")
            time.sleep(300)
            continue

        for platform, check_func in [
            ("YouTube", check_youtube_live),
            ("TikTok", check_tiktok_live),
            ("Twitch", check_twitch_live)
        ]:
            is_live, link = check_func()
            if is_live and not active_streams[platform]:
                active_streams[platform] = True
                message = f"üî¥ {platform} —Å—Ç—Ä—ñ–º –ø–æ—á–∞–≤—Å—è: {link}"
                try:
                    bot.send_message(TELEGRAM_CHANNEL, message)
                    logger.info("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è %s", platform)
                except Exception as err:
                    logger.error("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è %s: %s", platform, err)
            elif not is_live and active_streams[platform]:
                active_streams[platform] = False
        time.sleep(300)

def start_background_task():
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ñ–æ–Ω–æ–≤—É –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—ñ–º—ñ–≤ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ.
    """
    thread = threading.Thread(target=check_streams_and_notify)
    thread.daemon = True
    thread.start()

# ================================
# –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ (–î–ï–ö–û–†–ê–¢–û–†–ò)
# –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ —ó—Ö —Å–ª—ñ–¥–æ–º –∑–∞ –≤—Å—ñ–º–∞ —ñ–Ω—à–∏–º–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —Ñ—É–Ω–∫—Ü—ñ–π, –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –ø–µ—Ä–µ–¥ bot.polling()
# ================================

@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.reply_to(message, "–ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä—ñ–º—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")

@bot.message_handler(commands=['checkstreams'])
def handle_check_streams(message):
    results = []
    for platform, check in [
        ("YouTube", check_youtube_live),
        ("TikTok", check_tiktok_live),
        ("Twitch", check_twitch_live)
    ]:
        is_live, link = check()
        if is_live:
            results.append(f"{platform}: {link}")
    if results:
        response = "üî¥ –ê–∫—Ç–∏–≤–Ω—ñ —Å—Ç—Ä—ñ–º–∏:\n" + "\n".join(results)
    else:
        response = "–ó–∞—Ä–∞–∑ —Å—Ç—Ä—ñ–º—ñ–≤ –Ω–µ–º–∞—î."
    bot.reply_to(message, response)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    # –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    bot.reply_to(message, f"–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –Ω–∞–ø–∏—Å–∞–≤: {message.text}")

# ================================
# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞ —Ç–∞ polling
# ================================
start_background_task()
bot.polling(none_stop=True)








