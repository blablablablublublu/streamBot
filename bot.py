import os
import re
import requests
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")  # –í–∫–∞–∂—ñ—Ç—å, —è–∫—â–æ —î API-–∫–ª—é—á
CHANNEL_ID = "UCcBeq64BydUvdA-kZsITNlg"           # YouTube Channel ID

TIKTOK_USERNAME = "top_gamer_qq"
TELEGRAM_CHANNEL = "@testbotika12"                # Telegram –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_LOGIN = "dmqman"

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å—Ç—Ä—ñ–º—ñ–≤ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
active_streams = {"YouTube": False, "TikTok": False, "Twitch": False}


def in_grey_zone() -> bool:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É "—Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ" –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ (–∑ 2:00 –¥–æ 12:00).
    """
    now = datetime.now()
    return 2 <= now.hour < 12


# –§—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º

async def check_youtube_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î YouTube API –∞–±–æ, –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ API-–∫–ª—é—á–∞, —Å–ø–∏—Ä–∞—é—á–∏—Å—å –Ω–∞ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É.
    """
    try:
        if YOUTUBE_API_KEY:
            url = (
                "https://www.googleapis.com/youtube/v3/search"
                f"?part=snippet&channelId={CHANNEL_ID}&eventType=live&type=video&key={YOUTUBE_API_KEY}"
            )
            resp = requests.get(url, timeout=5)
            data = resp.json()
            if data.get("items"):
                video_id = data["items"][0]["id"]["videoId"]
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                return True, video_url
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç ‚Äì HTML –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            url = f"https://www.youtube.com/channel/{CHANNEL_ID}/live"
            resp = requests.get(url, timeout=5)
            if "isLiveBroadcast" in resp.text:
                return True, url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ YouTube: %s", e)
        return False, None


async def check_tiktok_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç—Ä—ñ–º—É –≤ TikTok —á–µ—Ä–µ–∑ –ø–æ—à—É–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –≤–∏—Ä–∞–∑–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "liveStatus".
    """
    try:
        url = f"https://www.tiktok.com/@{TIKTOK_USERNAME}"
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers, timeout=5)
        match = re.search(r'"liveStatus"\s*:\s*(true|false)', resp.text, re.IGNORECASE)
        if match and match.group(1).lower() == "true":
            return True, url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ TikTok: %s", e)
        return False, None


async def check_twitch_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î Twitch —á–µ—Ä–µ–∑ API –∞–±–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫—â–æ API –¥–æ—Å—Ç—É–ø–Ω–∏–π.
    """
    try:
        if TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET:
            token_url = "https://id.twitch.tv/oauth2/token"
            params = {
                "client_id": TWITCH_CLIENT_ID,
                "client_secret": TWITCH_CLIENT_SECRET,
                "grant_type": "client_credentials"
            }
            token_resp = requests.post(token_url, params=params, timeout=5)
            token_data = token_resp.json()
            access_token = token_data.get("access_token")
            if not access_token:
                return False, None

            headers = {
                "Client-ID": TWITCH_CLIENT_ID,
                "Authorization": f"Bearer {access_token}"
            }
            stream_resp = requests.get(
                "https://api.twitch.tv/helix/streams",
                headers=headers,
                params={"user_login": TWITCH_LOGIN},
                timeout=5
            )
            stream_data = stream_resp.json()
            if stream_data.get("data"):
                live_url = f"https://www.twitch.tv/{TWITCH_LOGIN}"
                return True, live_url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ Twitch: %s", e)
        return False, None


# –§–æ–Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é job_queue
async def check_streams_and_notify(context: ContextTypes.DEFAULT_TYPE):
    """
    –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–∑–Ω–∞—á–µ–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    –≤ Telegram-–∫–∞–Ω–∞–ª –ª–∏—à–µ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Å—Ç—Ä—ñ–º—É. –Ø–∫—â–æ —Å—Ç—Ä—ñ–º –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π, –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ
    –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –¥–æ –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è. –¢–∞–∫–æ–∂, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –Ω–∞–ª–µ–∂–∏—Ç—å "—Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ",
    –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è.
    """
    if in_grey_zone():
        logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤ —Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
    for platform, check_function in [
        ("YouTube", check_youtube_live),
        ("TikTok", check_tiktok_live),
        ("Twitch", check_twitch_live)
    ]:
        is_live, link = await check_function()
        # –Ø–∫—â–æ —Å—Ç—Ä—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–π, –∞–ª–µ –º–∏ —â–µ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–ª–∏ ‚Äì –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if is_live and not active_streams[platform]:
            active_streams[platform] = True
            message = f"üî¥ {platform} —Å—Ç—Ä—ñ–º –ø–æ—á–∞–≤—Å—è: {link}"
            await context.bot.send_message(chat_id=TELEGRAM_CHANNEL, text=message)
            logger.info("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ %s", platform)
        # –Ø–∫—â–æ —Å—Ç—Ä—ñ–º –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        elif not is_live and active_streams[platform]:
            active_streams[platform] = False


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä—ñ–º—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")


async def checkstreams_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = {
        "YouTube": await check_youtube_live(),
        "TikTok": await check_tiktok_live(),
        "Twitch": await check_twitch_live()
    }
    message = "üî¥ **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:**\n"
    any_live = False
    for platform, (is_live, link) in results.items():
        if is_live:
            any_live = True
            message += f"{platform}: {link}\n"
    if not any_live:
        message = "–ù–∞—Ä–∞–∑—ñ —Å—Ç—Ä—ñ–º—ñ–≤ –Ω–µ–º–∞—î."
    await update.message.reply_text(message)


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("checkstreams", checkstreams_command))

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ job_queue –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    application.job_queue.run_repeating(check_streams_and_notify, interval=300, first=0)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    application.run_polling()


if __name__ == "__main__":
    main()





