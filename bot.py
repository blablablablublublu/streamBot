import os
import re
import requests
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")   # –ó–∞–º—ñ—Å—Ç—å None –≤–≤–µ–¥—ñ—Ç—å —Ä–µ–∞–ª—å–Ω–∏–π API-–∫–ª—é—á
CHANNEL_ID = "UCcBeq64BydUvdA-kZsITNlg"            # YouTube Channel ID

TIKTOK_USERNAME = "top_gamer_qq"
TELEGRAM_CHANNEL = "@testbotika12"                 # Telegram –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_LOGIN = "dmqman"

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä—ñ–º—ñ–≤
active_streams = {"YouTube": False, "TikTok": False, "Twitch": False}

def is_in_grey_zone():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–µ—Ä–µ–±—É–≤–∞—î–º–æ –≤ "—Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ".
    –°—ñ—Ä—ñ –∑–æ–Ω–∏: –∑ 2:00 –¥–æ 12:00.
    """
    current_hour = asyncio.get_event_loop().time() // 3600 % 24  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
    return 2 <= current_hour <= 12

# –§—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
async def check_youtube_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ YouTube API –∞–±–æ –∑–∞–ø–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥ (HTML).
    """
    try:
        if YOUTUBE_API_KEY:  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î API, —è–∫—â–æ –∫–ª—é—á –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            url = (
                "https://www.googleapis.com/youtube/v3/search"
                f"?part=snippet&channelId={CHANNEL_ID}&eventType=live&type=video&key={YOUTUBE_API_KEY}"
            )
            resp = requests.get(url, timeout=5)
            data = resp.json()
            if data.get("items"):
                video_id = data["items"][0]["id"]["videoId"]
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                return True, video_url
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –ø–æ—à—É–∫ live —á–µ—Ä–µ–∑ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É
            url = f"https://www.youtube.com/channel/{CHANNEL_ID}/live"
            resp = requests.get(url, timeout=5)
            if "isLiveBroadcast" in resp.text:
                return True, url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ YouTube: %s", e)
        return False, None

async def check_tiktok_live():
    """
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É live —É HTML.
    """
    try:
        url = f"https://www.tiktok.com/@{TIKTOK_USERNAME}"
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers, timeout=5)
        match = re.search(r'"liveStatus"\s*:\s*(true|false)', resp.text, re.IGNORECASE)
        if match and match.group(1).lower() == "true":
            return True, url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ TikTok: %s", e)
        return False, None

async def check_twitch_live():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î Twitch API –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± (HTML-—Å—Ç–æ—Ä—ñ–Ω–∫–∞).
    """
    try:
        if TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET:
            # –û—Ç—Ä–∏–º—É—î–º–æ access token
            token_url = "https://id.twitch.tv/oauth2/token"
            params = {
                "client_id": TWITCH_CLIENT_ID,
                "client_secret": TWITCH_CLIENT_SECRET,
                "grant_type": "client_credentials"
            }
            token_resp = requests.post(token_url, params=params, timeout=5)
            token_data = token_resp.json()
            access_token = token_data.get("access_token")
            if not access_token:
                return False, None

            headers = {
                "Client-ID": TWITCH_CLIENT_ID,
                "Authorization": f"Bearer {access_token}"
            }

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä—ñ–º—É
            stream_resp = requests.get(
                "https://api.twitch.tv/helix/streams", 
                headers=headers, 
                params={"user_login": TWITCH_LOGIN}, 
                timeout=5
            )
            stream_data = stream_resp.json()
            if stream_data.get("data"):
                live_url = f"https://www.twitch.tv/{TWITCH_LOGIN}"
                return True, live_url
        return False, None
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ Twitch: %s", e)
        return False, None

async def check_streams_and_notify(application):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—ñ–º—ñ–≤ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    """
    while True:
        if is_in_grey_zone():
            logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ —Å—ñ—Ä—ñ –∑–æ–Ω–∏.")
            await asyncio.sleep(300)
            continue

        for platform, check_function in [("YouTube", check_youtube_live),
                                         ("TikTok", check_tiktok_live),
                                         ("Twitch", check_twitch_live)]:
            is_live, link = await check_function()
            if is_live and not active_streams[platform]:  # –Ø–∫—â–æ —Å—Ç—Ä—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–π —ñ —â–µ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–ª–∏
                active_streams[platform] = True
                message = f"üî¥ {platform}: {link}"
                await application.bot.send_message(chat_id=TELEGRAM_CHANNEL, text=message)
            elif not is_live and active_streams[platform]:  # –Ø–∫—â–æ —Å—Ç—Ä—ñ–º –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
                active_streams[platform] = False

        await asyncio.sleep(300)  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ‚Äì 5 —Ö–≤–∏–ª–∏–Ω

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
    """
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä—ñ–º—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")

async def checkstreams_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /checkstreams: —Ä—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞.
    """
    results = {
        "YouTube": await check_youtube_live(),
        "TikTok": await check_tiktok_live(),
        "Twitch": await check_twitch_live()
    }
    message = "üî¥ **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:**\n"
    any_live = False
    for platform, (is_live, link) in results.items():
        if is_live:
            any_live = True
            message += f"{platform}: {link}\n"
    if not any_live:
        message = "–ù–∞—Ä–∞–∑—ñ —Å—Ç—Ä—ñ–º—ñ–≤ –Ω–µ–º–∞—î."
    await update.message.reply_text(message)

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    """
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("checkstreams", checkstreams_command))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É —Ñ–æ–Ω—ñ
    asyncio.create_task(check_streams_and_notify(application))

    application.run_polling()

if __name__ == "__main__":
    main()




